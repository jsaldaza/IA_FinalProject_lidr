// üåü TESTFORGE AI - SCHEMA MONGODB SIMPLE Y FUNCIONAL
// ================================================
// MongoDB Atlas optimizado para distribuci√≥n y funcionamiento inmediato

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// üë§ USUARIOS
model User {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  email                  String                   @unique
  password               String                   
  name                   String                   @default("")
  avatarUrl              String?                  
  
  // Metadata y auditor√≠a
  isActive               Boolean                  @default(true)
  lastLoginAt           DateTime?
  emailVerified         Boolean                  @default(false)
  emailVerifiedAt       DateTime?
  
  // Timestamps autom√°ticos
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @updatedAt
  
  // Relaciones
  projects               Project[]
  conversationalAnalyses ConversationalAnalysis[]
  testCases              TestCase[]
  aiUsageMetrics         AIUsageMetric[]
  blacklistedTokens      BlacklistedToken[]
  conversationHistories  ConversationHistory[]
  analyses               Analysis[]
  
  @@map("users")
}

// üìã PROYECTOS
model Project {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  title           String        
  description     String?       
  slug            String?       @unique 
  
  // Configuraci√≥n del proyecto
  status          String        @default("ACTIVE") 
  isArchived      Boolean       @default(false)
  isPublic        Boolean       @default(false) 
  analysisEnabled Boolean       @default(true)
  
  // Metadata
  userId          String        @db.ObjectId
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Configuraci√≥n espec√≠fica 
  settings        Json?         
  tags            String[]      
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relaciones
  analyses        Analysis[]
  
  @@map("projects")
}

// ü§ñ AN√ÅLISIS CONVERSACIONAL
model ConversationalAnalysis {
  id           String                  @id @default(auto()) @map("_id") @db.ObjectId
  title        String                  
  description  String                  
  epicContent  String                  
  
  // Estado y progreso
  currentPhase String                  @default("ANALYSIS") 
  status       String                  @default("IN_PROGRESS")
  completeness Float                   @default(0.0) 
  
  // Metadata de procesamiento
  estimatedDuration Int?               
  actualDuration    Int?               
  complexity        String            @default("MEDIUM")
  
  // Configuraci√≥n de IA
  aiModel          String              @default("gpt-4o-mini") 
  tokenConsumption Int                 @default(0)
  costEstimate     Float               @default(0.0) 
  
  // Usuario y relaciones
  userId           String              @db.ObjectId
  user             User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  startedAt        DateTime?           
  completedAt      DateTime?           
  
  // Relaciones
  messages         ConversationalMessage[]
  histories        ConversationHistory[]
  testCases        TestCase[]
  analysisSummit   AnalysisSummit?
  
  @@map("conversational_analyses")
}

// üí¨ MENSAJES 
model ConversationalMessage {
  id          String                 @id @default(auto()) @map("_id") @db.ObjectId
  content     String                 
  role        String                 // USER, ASSISTANT, SYSTEM
  messageType String                 @default("QUESTION")
  category    QuestionCategory?
  
  // Metadata del mensaje
  tokenCount  Int?                   
  confidence  Float?                 
  isImportant Boolean                @default(false)
  
  // Relaciones
  analysisId  String                 @db.ObjectId
  analysis    ConversationalAnalysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime               @default(now())
  
  @@map("conversational_messages")
}

// üìä RESUMEN DE AN√ÅLISIS
model AnalysisSummit {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationalAnalysisId String   @unique @db.ObjectId
  
  // Resultados estructurados (JSON nativo en MongoDB)
  refinedRequirements      Json?
  functionalAspects        Json?
  nonFunctionalAspects     Json?
  identifiedRisks          Json?
  businessRules            Json?
  acceptanceCriteria       Json?
  suggestedTestCases       Json?
  
  // M√©tricas de calidad
  completenessScore        Float?   @default(0.0) 
  qualityScore            Float?   @default(0.0) 
  riskLevel               String   @default("MEDIUM")
  
  // Timestamps
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  
  // Relaci√≥n
  conversationalAnalysis   ConversationalAnalysis @relation(fields: [conversationalAnalysisId], references: [id], onDelete: Cascade)
  
  @@map("analysis_summits")
}

// üß™ CASOS DE PRUEBA
model TestCase {
  id                       String                  @id @default(auto()) @map("_id") @db.ObjectId
  title                    String                  
  description              String                  
  
  // Configuraci√≥n del test
  priority                 String                  @default("MEDIUM")
  category                 String                  @default("FUNCTIONAL")
  estimatedDuration       Int?                    
  
  // Metadata de generaci√≥n
  generatedByAI            Boolean                 @default(false)
  aiConfidence            Float?                  
  reviewStatus            String                  @default("PENDING")
  
  // Relaciones
  conversationalAnalysisId String                  @db.ObjectId
  conversationalAnalysis   ConversationalAnalysis @relation(fields: [conversationalAnalysisId], references: [id], onDelete: Cascade)
  
  userId                   String                  @db.ObjectId
  user                     User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  
  @@map("test_cases")
}

// üí∞ M√âTRICAS DE IA
model AIUsageMetric {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Detalles de la request
  requestType      String   
  model            String   
  endpoint         String?  
  
  // Tokens y costos
  promptTokens     Int
  completionTokens Int
  totalTokens      Int
  estimatedCost    Float    
  
  // Metadata de rendimiento
  responseTime     Int?     
  success          Boolean  @default(true)
  errorMessage     String?  
  
  // Timestamps
  createdAt        DateTime @default(now())
  
  @@map("ai_usage_metrics")
}

// üö´ TOKENS BLOQUEADOS
model BlacklistedToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  tokenHash String   @unique 
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Metadata de bloqueo
  reason    String   @default("LOGOUT")
  expiresAt DateTime  
  userAgent String?   
  ipAddress String?   
  
  // Timestamps
  createdAt DateTime @default(now())
  
  @@map("blacklisted_tokens")
}

// üí¨ HISTORIAL DE CONVERSACIONES
model ConversationHistory {
  id              String                  @id @default(auto()) @map("_id") @db.ObjectId
  conversationKey String                  @unique 
  messages        Json                    
  
  // Metadata de sesi√≥n
  sessionDuration Int?                    
  messageCount   Int                     @default(0)
  
  // Relaciones
  analysisId      String?                 @db.ObjectId
  analysis        ConversationalAnalysis? @relation(fields: [analysisId], references: [id], onDelete: SetNull)
  userId          String                  @db.ObjectId
  user            User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Timestamps
  lastUsed        DateTime                @default(now())
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  
  @@map("conversation_histories")
}

// üìã AN√ÅLISIS LEGACY
model Analysis {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  requirement    String         
  summary        String         
  redFlags       String[]
  status         String         @default("PENDING")
  
  // Relaciones
  userId         String         @db.ObjectId
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectId      String?        @db.ObjectId
  project        Project?       @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  // Timestamps
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relaciones legacy
  questions      Question[]
  testStrategies TestStrategy[]
  
  @@map("analyses")
}

// ‚ùì PREGUNTAS
model Question {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  content    String       
  type       String       @default("FUNCTIONAL")
  priority   String       @default("MEDIUM")
  answer     String?      
  
  // Relaciones
  analysisId String       @db.ObjectId
  analysis   Analysis     @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  
  @@map("questions")
}

// üéØ ESTRATEGIAS DE PRUEBA
model TestStrategy {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String   
  description String   
  steps       Json
  coverage    String[]
  priority    String   @default("MEDIUM")
  
  // Relaciones
  analysisId  String   @db.ObjectId
  analysis    Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("test_strategies")
}

// üè∑Ô∏è ENUMS
enum QuestionCategory {
  FUNCTIONAL_REQUIREMENTS
  NON_FUNCTIONAL_REQUIREMENTS
  BUSINESS_RULES
  USER_INTERFACE
  DATA_HANDLING
  INTEGRATION
  SECURITY
  PERFORMANCE
  ERROR_HANDLING
  ACCEPTANCE_CRITERIA
}