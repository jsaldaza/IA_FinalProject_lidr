#!/bin/bash
# Script de pruebas completas para el sistema de chat de TestForge
# Demuestra el flujo completo: crear proyecto -> chat interactivo -> completar

echo "üöÄ TestForge Chat System - Pruebas Completas"
echo "=========================================="

# Configuraci√≥n
API_BASE="http://localhost:3001/api"
TOKEN="YOUR_JWT_TOKEN_HERE"

# Colores para output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo ""
echo -e "${BLUE}üìã PASO 1: Crear proyecto r√°pido${NC}"
echo "================================="

# 1. Crear proyecto r√°pido con solo t√≠tulo
QUICK_CREATE_RESPONSE=$(curl -s -X POST "$API_BASE/projects/quick-create" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "title": "Sistema de Gesti√≥n de Inventario"
  }')

echo "Respuesta de creaci√≥n r√°pida:"
echo "$QUICK_CREATE_RESPONSE" | jq '.'

# Extraer PROJECT_ID de la respuesta
PROJECT_ID=$(echo "$QUICK_CREATE_RESPONSE" | jq -r '.data.id // .data.projectId // empty')

if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" = "null" ]; then
    echo -e "${RED}‚ùå Error: No se pudo obtener el ID del proyecto${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Proyecto creado con ID: $PROJECT_ID${NC}"

echo ""
echo -e "${BLUE}üìã PASO 2: Obtener historial inicial de mensajes${NC}"
echo "=============================================="

# 2. Obtener mensajes iniciales (deber√≠a incluir mensaje de bienvenida de IA)
MESSAGES_RESPONSE=$(curl -s -X GET "$API_BASE/projects/$PROJECT_ID/messages" \
  -H "Authorization: Bearer $TOKEN")

echo "Mensajes iniciales:"
echo "$MESSAGES_RESPONSE" | jq '.'

echo ""
echo -e "${BLUE}üí¨ PASO 3: Chat interactivo simulado${NC}"
echo "=================================="

# Array de mensajes para simular conversaci√≥n completa
declare -a CHAT_MESSAGES=(
    "Hola! Necesito un sistema para gestionar el inventario de mi tienda. Quiero controlar productos, stock, proveedores y generar reportes de ventas."
    "Los usuarios ser√≠an: administrador (acceso completo), empleados de tienda (consultar y actualizar stock), y gerente (reportes y an√°lisis). Necesito que sea web y m√≥vil."
    "Para los productos necesito: c√≥digo SKU, nombre, descripci√≥n, precio de compra, precio de venta, stock actual, stock m√≠nimo, categor√≠a, y proveedor asociado."
    "Quiero alertas autom√°ticas cuando el stock est√© por debajo del m√≠nimo, integraci√≥n con proveedores para re√≥rden autom√°tico, y reportes de rotaci√≥n de inventario."
    "Tambi√©n necesito control de movimientos: entradas por compras, salidas por ventas, ajustes de inventario, y transferencias entre sucursales si tengo m√∫ltiples ubicaciones."
    "Para seguridad, cada movimiento debe quedar registrado con usuario, fecha/hora, y motivo. Los precios solo los puede cambiar el administrador."
)

# Enviar cada mensaje y obtener respuesta de IA
for i in "${!CHAT_MESSAGES[@]}"; do
    MESSAGE_NUM=$((i + 1))
    MESSAGE="${CHAT_MESSAGES[$i]}"
    
    echo ""
    echo -e "${YELLOW}üí¨ Mensaje $MESSAGE_NUM del usuario:${NC}"
    echo "$MESSAGE"
    
    # Enviar mensaje al chat
    CHAT_RESPONSE=$(curl -s -X POST "$API_BASE/projects/$PROJECT_ID/chat" \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer $TOKEN" \
      -d "{\"content\": \"$MESSAGE\"}")
    
    echo ""
    echo -e "${GREEN}ü§ñ Respuesta de la IA:${NC}"
    echo "$CHAT_RESPONSE" | jq -r '.data.message // .message // "No se pudo obtener respuesta"'
    
    # Peque√±a pausa para simular conversaci√≥n real
    sleep 2
done

echo ""
echo -e "${BLUE}üìä PASO 4: Verificar estado del proyecto${NC}"
echo "======================================="

# 4. Obtener estado actualizado del proyecto
PROJECT_STATUS=$(curl -s -X GET "$API_BASE/projects/$PROJECT_ID/status" \
  -H "Authorization: Bearer $TOKEN")

echo "Estado actual del proyecto:"
echo "$PROJECT_STATUS" | jq '.'

# Verificar completeness
COMPLETENESS=$(echo "$PROJECT_STATUS" | jq -r '.data.completeness // 0')
echo -e "${BLUE}üìà Completeness actual: $COMPLETENESS%${NC}"

echo ""
echo -e "${BLUE}üìã PASO 5: Obtener historial completo de mensajes${NC}"
echo "=============================================="

# 5. Obtener todos los mensajes del chat
FULL_MESSAGES=$(curl -s -X GET "$API_BASE/projects/$PROJECT_ID/messages" \
  -H "Authorization: Bearer $TOKEN")

echo "Historial completo de mensajes:"
echo "$FULL_MESSAGES" | jq '.data.messages | length' | xargs echo "Total de mensajes:"
echo "$FULL_MESSAGES" | jq '.data.messages[] | {role: .role, preview: (.content | tostring | .[0:100])}'

echo ""
echo -e "${BLUE}üéØ PASO 6: Completar proyecto${NC}"
echo "============================="

# 6. Completar proyecto para generar an√°lisis final
COMPLETE_RESPONSE=$(curl -s -X POST "$API_BASE/projects/$PROJECT_ID/complete" \
  -H "Authorization: Bearer $TOKEN")

echo "Respuesta de completaci√≥n:"
echo "$COMPLETE_RESPONSE" | jq '.'

echo ""
echo -e "${BLUE}üìä PASO 7: Estado final del proyecto${NC}"
echo "==================================="

# 7. Obtener estado final
FINAL_STATUS=$(curl -s -X GET "$API_BASE/projects/$PROJECT_ID/status" \
  -H "Authorization: Bearer $TOKEN")

echo "Estado final:"
echo "$FINAL_STATUS" | jq '.'

echo ""
echo -e "${GREEN}üéâ ¬°Pruebas completadas exitosamente!${NC}"
echo "====================================="

echo ""
echo -e "${BLUE}üìã RESUMEN DE LA PRUEBA:${NC}"
echo "‚Ä¢ ‚úÖ Proyecto creado con t√≠tulo √∫nicamente"
echo "‚Ä¢ ‚úÖ Chat interactivo con 6 mensajes del usuario"
echo "‚Ä¢ ‚úÖ Respuestas contextuales de la IA"
echo "‚Ä¢ ‚úÖ Seguimiento del progreso de completeness"
echo "‚Ä¢ ‚úÖ Proyecto completado exitosamente"
echo "‚Ä¢ ‚úÖ Historial de mensajes preservado"

echo ""
echo -e "${YELLOW}üîó URLs para testing manual:${NC}"
echo "‚Ä¢ Chat del proyecto: http://localhost:3000/chat/$PROJECT_ID"
echo "‚Ä¢ Estado del proyecto: http://localhost:3000/projects/$PROJECT_ID"
echo "‚Ä¢ Lista de proyectos: http://localhost:3000/projects"

echo ""
echo -e "${BLUE}üìö ENDPOINTS PROBADOS:${NC}"
echo "‚Ä¢ POST /api/projects/quick-create - ‚úÖ"
echo "‚Ä¢ GET  /api/projects/:id/messages - ‚úÖ"  
echo "‚Ä¢ POST /api/projects/:id/chat - ‚úÖ"
echo "‚Ä¢ GET  /api/projects/:id/status - ‚úÖ"
echo "‚Ä¢ POST /api/projects/:id/complete - ‚úÖ"

echo ""
echo -e "${GREEN}üöÄ El sistema de chat de TestForge est√° funcionando correctamente!${NC}"